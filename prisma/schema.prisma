generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String     @id @default(uuid())
  code      String?    @unique @db.VarChar(50)
  name      String     @unique @db.VarChar(50)
  logo      String?    @db.VarChar(255)
  email     String     @unique @db.VarChar(50)
  address   String?    @db.VarChar(1000)
  brands    String[]
  extraData Json?
  branches  Branch[]
  employees Employee[]
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Branch {
  id           String     @id @default(uuid())
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  state        String     @db.VarChar(50)
  lga          String     @db.VarChar(50)
  name         String     @db.VarChar(50)
  code         String?    @unique @db.VarChar(255)
  address      String     @db.VarChar(1000)
  isHeadOffice Boolean    @default(false)
  phoneNumber  String?    @db.VarChar(50)
  email        String     @db.VarChar(50)
  employees    Employee[]
  extraData    Json?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Brand {
  id                  String                   @id @default(uuid())
  name                String                   @unique @db.VarChar(50)
  code                String?                  @unique @db.VarChar(50)
  description         String?                  @db.VarChar(1000)
  logo                String?                  @db.VarChar(255)
  products            Product[]
  prices              PriceMaster[]
  pfiRequestForms     PfiRequestForm[]
  invoiceRequestForms InvoiceRequestForm[]
  extraData           Json?
  isActive            Boolean                  @default(true)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
}

model Product {
  id                  String                @id @default(uuid())
  name                String                @db.VarChar(50)
  code                String?               @unique @db.VarChar(50)
  brand               Brand                 @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId             String
  description         String?               @db.VarChar(1000)
  specifications      String?               @db.VarChar(1000)
  brochures           String[]
  images              String[]              @db.VarChar(2000)
  price               PriceMaster?
  pfiRequestForms     PfiRequestForm[]
  invoiceRequestForms InvoiceRequestForm[]
  vatInclusive        Boolean?              @default(false)
  vatRate             String?               @db.VarChar(50)
  extraData           Json?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PriceMaster {
  id         String    @id @default(uuid())
  unitPrice  String    @db.VarChar(50)
  promoPrice String?   @db.VarChar(50)
  anyPromo   Boolean   @default(false)
  promoText  String?   @db.VarChar(1000)
  validFrom  String?
  validTill  String?
  brand      Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId    String    
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String    @unique
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Employee {
  id                    String                   @id @default(uuid())
  company               Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId             String
  branch                Branch                   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId              String
  staffCadre            String[]                 @default(["salesPerson"])
  firstName             String                   @db.VarChar(50)
  middleName            String?                  @db.VarChar(50)
  lastName              String                   @db.VarChar(50)
  email                 String                   @unique @db.VarChar(50)
  password              String                   @db.VarChar(255)
  supervisorId          String?
  employmentDate        String?                  @db.VarChar(50)
  brandsAssigned        String[]
  customers             Customer[]
  contactPersons        ContactPerson[]
  visitReports          VisitReport[]
  pfiRequestForms       PfiRequestForm[]
  invoiceRequestForms   InvoiceRequestForm[]
  MarkettingActivities  MarkettingActivity[]
  sentComments          Comment[]               @relation("Sender")
  receivedComments      Comment[]               @relation("Receiver")
  extraData             Json?
  isActive              Boolean                 @default(true)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}



model Customer {
  id                  String               @id @default(uuid())
  employee            Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String
  companyName         String               @db.VarChar(50)
  state               String?              @db.VarChar(50)
  lga                 String?              @db.VarChar(50)
  city                String?              @db.VarChar(50)
  address             String?              @db.VarChar(1000)
  companyWebsite      String?              @db.VarChar(50)
  industry            String?              @db.VarChar(50)
  customerType        String?              @db.VarChar(50)
  enquirySource       String?              @db.VarChar(50)
  status              String?              @default("cold") @db.VarChar(50)
  approved            Boolean              @default(false)
  lastVisited         String               @default("No Visit")
  contactPersons      ContactPerson[]
  visitReports        VisitReport[]
  pfiRequestForms     PfiRequestForm[]
  invoiceRequestForms InvoiceRequestForm[]
  extraData           Json?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ContactPerson {
  id                  String               @id @default(uuid())
  employee            Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String
  customer            Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId          String
  name                String               @db.VarChar(50)
  designation         String?              @db.VarChar(50)
  phoneNumber         String               @db.VarChar(50)
  email               String?              @db.VarChar(50)
  visitReports        VisitReport[]
  pfiRequestForms     PfiRequestForm[]
  invoiceRequestForms InvoiceRequestForm[]
  extraData           Json?
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model VisitReport {
  id                  String                @id @default(uuid())
  employee            Employee              @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId          String
  customer            Customer              @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId          String
  contactPerson       ContactPerson         @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  contactPersonId     String
  callType            String                @db.VarChar(50)
  status              String                @db.VarChar(50)
  productsDiscussed   String[]
  quantity            String?               @db.VarChar(50)
  durationOfMeeting   String                @db.VarChar(50)
  meetingOutcome      String?               @db.VarChar(1000)
  visitDate           String?
  nextVisitDate       String?
  followUpVisits      Json[]
  pfiRequest          Boolean?              @default(false)
  extraData           Json?
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}



model PfiRequestForm {
  id                          String              @id @default(uuid())
  employee                    Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId                  String
  customer                    Customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId                  String?
  contactPerson               ContactPerson?      @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  contactPersonId             String?
  customerType                String              
  companyName                 String?             @db.VarChar(50)
  companyAddress              String?             @db.VarChar(1000)
  contactPersonName           String?             @db.VarChar(50)
  phoneNumber                 String?             @db.VarChar(50)
  emailAddress                String?             @db.VarChar(50)
  brand                       Brand               @relation(fields: [brandId], references: [id])
  brandId                     String
  product                     Product             @relation(fields: [productId], references: [id])
  productId                   String
  vehicleDetails              String?             @db.VarChar(1000)
  quantity                    String?
  pricePerVehicle             String?
  bodyTypeDescription         String?             @db.VarChar(1000)
  vehicleServiceDetails       String?             @db.VarChar(1000)
  specialFitmentDetails       String?             @db.VarChar(1000)
  costForSpecialFitment       String?             @db.VarChar(50)
  discount                    String?
  vatDeduction                Boolean             @default(false)
  whtDeduction                Boolean             @default(false)
  registration                Boolean             @default(false)
  refundRebateAmount          String?             @db.VarChar(50)
  refundRebateRecipient       String?             @db.VarChar(50)
  designation                 String?             @db.VarChar(50)
  relationshipWithTransaction String?             @db.VarChar(255)
  estimatedOrderClosingTime   String?             @db.VarChar(50)
  paymentType                 String?             @db.VarChar(50)
  deliveryLocation            String?             @db.VarChar(1000)
  approved                    Boolean             @default(false)
  locked                      Boolean             @default(false)
  pfiReferenceNumber          String?
  pfiDate                     String?
  additionalInformation       String?             @db.VarChar(1000)
  extraData                   Json?
  invoiceRequestForm          InvoiceRequestForm?
  isActive                    Boolean             @default(true)
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
}

model InvoiceRequestForm {
  id                          String         @id @default(uuid())
  pfiRequestForm              PfiRequestForm @relation(fields: [pfiRequestFormId], references: [id], onDelete: Cascade)
  pfiRequestFormId            String         @unique
  employee                    Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId                  String
  customer                    Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId                  String?
  contactPerson               ContactPerson? @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  contactPersonId             String?
  customerType                String?
  invoiceName                 String?        @db.VarChar(50)
  address                     String?        @db.VarChar(1000)
  contactOfficeTelephone      String?        @db.VarChar(50)
  emailAddress                String?        @db.VarChar(50)
  salesThru                   String?        @db.VarChar(50)
  industry                    String?        @db.VarChar(50)
  brand                       Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                     String
  product                     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId                   String
  vehicleModelDetails         String?        @db.VarChar(1000)
  quantity                    String?        @db.VarChar(50)
  color                       String?        @db.VarChar(50)
  totalInvoiceValuePerVehicle String?        @db.VarChar(50)
  typeOfBodyBuilding          String?        @db.VarChar(1000)
  bodyFabricatorName          String?        @db.VarChar(1000)
  registration                String?        @db.VarChar(50)
  vatDeduction                Boolean        @default(false)
  whtDeduction                Boolean        @default(false)
  rebateAmount                String?        @db.VarChar(50)
  refundToCustomer            String?        @db.VarChar(50)
  servicePackageDetails       String?        @db.VarChar(255)
  rebateReceiver              String?        @db.VarChar(50)
  relationshipWithTransaction String?        @db.VarChar(50)
  expectedDeliveryDate        String?        @db.VarChar(50)
  deliveryLocation            String?        @db.VarChar(1000)
  deliveredBy                 String?        @db.VarChar(50)
  paymentStatus               String?        @db.VarChar(50)
  bankName                    String?        @db.VarChar(50)
  bankAccountName             String?        @db.VarChar(50)
  accountNumber               String?        @db.VarChar(50)
  amountPaid                  String?        @db.VarChar(50)
  dateOfPayment               String?
  lpoNumber                   String?        @db.VarChar(50)
  paymentDueDate              String?
  otherPaymentDetails         String?        @db.VarChar(1000)
  invoiceNumber               String?        @db.VarChar(50)
  invoiceDate                 String?
  deliveryNoteNumber          String?        @db.VarChar(2000)
  actualDeliveryDate          String?
  chasisNumber                String?        @db.VarChar(2000)
  delivery                    String         @default("pending")
  payment                     String?        @default("pending")
  approved                    Boolean        @default(false)
  approvedByGM                Boolean        @default(false)
  approvedByProductHead       Boolean        @default(false)
  additionalInformation       String?
  extraData                   Json?
  isActive                    Boolean        @default(true)
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime       @updatedAt
}

model MarkettingActivity {
  id           String   @id @default(uuid())
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId   String
  activityName String   @db.VarChar(50)
  activityDate String
  participants String?  @db.VarChar(1000)
  location     String
  objective    String
  targetResult String
  briefReport  String   @db.VarChar(1000)
  images       String[]
  costIncurred String   @db.VarChar(50)
  pdfDetails   String?  @db.VarChar(1000)
  approved     Boolean? @default(false)
  extraData    Json?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MonthlyTarget {
  id            String   @id @default(uuid())
  month         String   @db.VarChar(50)
  target        String
  extraData     Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Comment {
  id          String   @id @default(uuid())
  sender      Employee @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  receiver    Employee @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  resourceId  String?
  resourceUrl String?
  message     String?
  viewed      Boolean? @default(false)
  extraData   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  receiverId  String?
  staffCadre  String   @default("salesPerson")
  resourceId  String?
  resourceUrl String?
  title       String?  @default("New Notification")
  message     String
  viewed      Boolean? @default(false)
  viewedBy    String[] @default(["firstIdJustForTesting"])
  extraData   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
